*cmk.txt*
*Cmk* *cmk* *nvim-cmk*
--------------------------------------------------------------------------------
CONTENTS                                                            *cmk-contents*

  1. Config                                                       |cmk-config|
  2. Functions                                                 |cmk-functions|
  3. Commands                                                   |cmk-commands|

--------------------------------------------------------------------------------
CONFIG                                                                *cmk-config*

>lua
    require("nvim-cmk").setup({
      -- The buld type that will be used when compilling.
      -- It can be changed with `CMakeSetType` or `require'cmk'.set_build_type`
      -- cmk.BUILD_TYPES is an enum of all possible values
      build_type = "Debug", -- can be "Debug", "Release", "RelWithDebInfo" and "MinSizeRel"
      -- files used to get root directory
      root_marker = { ".git", "CMakeLists.txt", "compile_commands.json" },
      -- build directory path
      build_dir = "bin/",
      -- if true create user commands for
      -- `CMakeGenerate`
      -- `CMakeBuild`
      -- `CMakeBuildTest`
      -- `CMakeRunTest`
      -- `CMakeCat`
      -- `CMakeClean`
      user_commands = true,
      -- callback when shell returns 
      call_back = function(result)
        if result.code ~= 0 then
          print(result.stderr)
        else
          print(result.stdout)
        end
      end
<

--------------------------------------------------------------------------------
FUNCTIONS                                                           *cmk-functions*

Generates the cmake project                                     *function-generate*
>lua
cmk.generate()
<

Builds the project and tests                                       *function-build*
>lua
cmk.build()
<

Builds only the test                                          *function-build-test*
>lua
cmk.build_test()
<

Calls ctest in `project root`/test/                             *function-run-test*
>lua
cmk.run_test()
<

Prints out the test log file                                         *function-cat*
>lua
cmk.cat()
<

Clean the project files                                            *function-clean*
>lua
cmk.clean()
<

--------------------------------------------------------------------------------
COMMANDS                                                            *cmk-commansd*

TODO ...
